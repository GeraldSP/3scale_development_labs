apiVersion: v1
kind: Template
labels:
  demo: coolstore-microservice
  template: coolstore
metadata:
  annotations:
    description: CoolStore demo microservices application template
    iconClass: icon-java
    tags: microservice,jboss,spring
  name: coolstore
objects:
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: default_edit
  roleRef:
    name: view
  subjects:
  - kind: ServiceAccount
    name: default
# Inventory Service
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: inventory
    labels:
      app: inventory
  spec:
    tags:
    - name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: inventory
    labels:
      app: inventory
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: inventory:latest
    source:
      contextDir: inventory-service
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: MAVEN_MIRROR_URL
          value: ${MAVEN_MIRROR_URL}
        from:
          kind: ImageStreamTag
          name: jboss-eap70-openshift:1.5
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: Source
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: inventory
    labels:
      app: inventory
  spec:
    replicas: 1
    selector:
      deploymentconfig: inventory
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: inventory
          deploymentconfig: inventory
        name: inventory
      spec:
        containers:
        - env:
          - name: OPENSHIFT_KUBE_PING_LABELS
            value: application=inventory
          - name: OPENSHIFT_KUBE_PING_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MQ_CLUSTER_PASSWORD
            value: 7mzX0pLV03
          - name: JGROUPS_CLUSTER_PASSWORD
            value: CqUo3fYDTv
          - name: AUTO_DEPLOY_EXPLODED
            value: "false"
          - name: DB_SERVICE_PREFIX_MAPPING
            value: inventory-postgresql=DB
          - name: DB_JNDI
            value: java:jboss/datasources/InventoryDS
          - name: DB_USERNAME
            value: ${INVENTORY_DB_USERNAME}
          - name: DB_PASSWORD
            value: ${INVENTORY_DB_PASSWORD}
          - name: DB_DATABASE
            value: inventorydb
          image: inventory
          imagePullPolicy: Always
          lifecycle:
            preStop:
              exec:
                command:
                - /opt/eap/bin/jboss-cli.sh
                - -c
                - :shutdown(timeout=60)
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: inventory
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8888
            name: ping
            protocol: TCP
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 1Gi
            requests:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 75
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - inventory
        from:
          kind: ImageStreamTag
          name: inventory:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"inventory-postgresql","namespace":"","kind":"Service"}]'
    labels:
      app: inventory
    name: inventory
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: inventory
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: inventory-postgresql
    labels:
      app: inventory
      comp-type: database
  spec:
    replicas: 1
    selector:
      deploymentconfig: inventory-postgresql
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: inventory
          comp-type: database
          deploymentconfig: inventory-postgresql
        name: inventory-postgresql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            value: ${INVENTORY_DB_USERNAME}
          - name: POSTGRESQL_PASSWORD
            value: ${INVENTORY_DB_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: inventorydb
          image: postgresql
          imagePullPolicy: Always
          name: inventory-postgresql
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: inventory-postgresql-data
          ports:
          - containerPort: 5432
            protocol: TCP
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
        terminationGracePeriodSeconds: 60
        volumes:
        - name: inventory-postgresql-data
          emptyDir: {}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - inventory-postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:latest
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: inventory
    name: inventory-postgresql
  spec:
    ports:
    - port: 5432
      targetPort: 5432
    selector:
      deploymentconfig: inventory-postgresql
# Catalog Service
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: catalog
    labels:
      app: catalog
  spec:
    tags:
    - name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: catalog
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: catalog:latest
    source:
      contextDir: catalog-service
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: MAVEN_MIRROR_URL
          value: ${MAVEN_MIRROR_URL}
        from:
          kind: ImageStreamTag
          name: jboss-webserver31-tomcat8-openshift:1.3
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: Source
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: catalog
    labels:
      app: catalog
  spec:
    replicas: 1
    selector:
      deploymentconfig: catalog
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: catalog
          deploymentconfig: catalog
        name: catalog
      spec:
        containers:
        - env:
          - name: JWS_ADMIN_USERNAME
            value: Skq3VtCd
          - name: JWS_ADMIN_PASSWORD
            value: oktt6yhw
          - name: DB_USERNAME
            value: ${CATALOG_DB_USERNAME}
          - name: DB_PASSWORD
            value: ${CATALOG_DB_PASSWORD}
          - name: DB_NAME
            value: catalogdb
          - name: DB_SERVER
            value: catalog-mongodb
          image: catalog
          imagePullPolicy: Always
          name: catalog
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 10
            exec:
              command:
              - /bin/bash
              - -c
              - curl -s -u Skq3VtCd:oktt6yhw 'http://localhost:8080/manager/jmxproxy/?get=Catalina%3Atype%3DServer&att=stateName'
                |grep -iq 'stateName *= *STARTED'
            initialDelaySeconds: 15
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 600Mi
            requests:
              memory: 200Mi
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 75
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - catalog
        from:
          kind: ImageStreamTag
          name: catalog:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"catalog-mongodb","namespace":"","kind":"Service"}]'
    labels:
      app: catalog
    name: catalog
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: catalog
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: catalog
    name: catalog-mongodb
  spec:
    ports:
    - name: mongo
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      deploymentconfig: catalog-mongodb
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: catalog
      comp-type: database
    name: catalog-mongodb
  spec:
    replicas: 1
    selector:
      deploymentconfig: catalog-mongodb
    strategy:
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: catalog
          comp-type: database
          deploymentconfig: catalog-mongodb
      spec:
        containers:
        - env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MONGODB_USER
            value: ${CATALOG_DB_USERNAME}
          - name: MONGODB_PASSWORD
            value: ${CATALOG_DB_PASSWORD}
          - name: MONGODB_DATABASE
            value: catalogdb
          - name: MONGODB_ADMIN_PASSWORD
            value: ${CATALOG_DB_PASSWORD}
          image: mongodb
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: catalog-mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            failureThreshold: 10
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: mongodb-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: mongodb-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - catalog-mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:3.2
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange
    - type: ConfigChange
# Rating Service
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: rating
    labels:
      app: rating
  spec:
    tags:
    - name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: rating
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: rating:latest
    source:
      contextDir: rating-service
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: MAVEN_MIRROR_URL
          value: ${MAVEN_MIRROR_URL}
        from:
          kind: ImageStreamTag
          name: redhat-openjdk18-openshift:1.1
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: Source
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: rating
    labels:
      app: rating
  spec:
    replicas: 0
    selector:
      deploymentconfig: rating
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: rating
          deploymentconfig: rating
        name: rating
      spec:
        containers:
        - env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: rating
          imagePullPolicy: Always
          name: rating
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: "/health/liveness"
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreashold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: "/health/readiness"
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreashold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              memory: 200Mi
        terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 75
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - rating
        from:
          kind: ImageStreamTag
          name: rating:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"rating-mongodb","namespace":"","kind":"Service"}]'
    labels:
      app: rating
    name: rating
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: rating
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: rating
    name: rating-mongodb
  spec:
    ports:
    - name: mongo
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      deploymentconfig: rating-mongodb
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: rating
      comp-type: database
    name: rating-mongodb
  spec:
    replicas: 0
    selector:
      deploymentconfig: rating-mongodb
    strategy:
      recreateParams:
        post:
          execNewPod:
            command:
              - /bin/sh
              - -i
              - -c
              - env && while ! mongo ${RATING_MONGODB_SERVICE_HOST}:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval="$MONGODB_INIT" > /dev/null 2>&1; do echo "waiting for mongo ..."; sleep 5; done
            containerName: rating-mongodb
            env:
            - name: MONGODB_INIT
              value: db.ratings.insert({"_id":"329299","itemId":"329299","rating":5.0,"count":1});
                db.ratings.insert({"_id":"329199","itemId":"329199","rating":1.0,"count":12});
                db.ratings.insert({"_id":"165613","itemId":"165613","rating":2.3,"count":31});
                db.ratings.insert({"_id":"165614","itemId":"165614","rating":3.0,"count":51});
                db.ratings.insert({"_id":"165954","itemId":"165954","rating":4.0,"count":66});
                db.ratings.insert({"_id":"444434","itemId":"444434","rating":5.0,"count":76});
                db.ratings.insert({"_id":"444435","itemId":"444435","rating":4.0,"count":83});
                db.ratings.insert({"_id":"444436","itemId":"444436","rating":3.0,"count":123});
          failurePolicy: ignore
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: rating
          comp-type: database
          deploymentconfig: rating-mongodb
      spec:
        containers:
        - env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MONGODB_USER
            value: ${RATING_DB_USERNAME}
          - name: MONGODB_PASSWORD
            value: ${RATING_DB_PASSWORD}
          - name: MONGODB_DATABASE
            value: ratingdb
          - name: MONGODB_ADMIN_PASSWORD
            value: ${RATING_DB_PASSWORD}
          image: mongodb
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: rating-mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            failureThreshold: 10
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: mongodb-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: mongodb-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - rating-mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:3.2
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: rating-config
    labels:
      app: rating
  data:
    rating-config.yaml: |-
      rating.http.port: 8080
      connection_string: mongodb://rating-mongodb:27017
      db_name: ratingdb
      username: ${RATING_DB_USERNAME}
      password: ${RATING_DB_PASSWORD}

# Review Service
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: review
    labels:
      app: review
  spec:
    tags:
    - name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: review
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: review:latest
    source:
      contextDir: review-service
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: MAVEN_MIRROR_URL
          value: ${MAVEN_MIRROR_URL}
        from:
          kind: ImageStreamTag
          name: redhat-openjdk18-openshift:1.1
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: Source
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: review
    labels:
      app: review
  spec:
    replicas: 0
    selector:
      deploymentconfig: review
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: review
          deploymentconfig: review
        name: review
      spec:
        containers:
        - env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: JAVA_OPTIONS
            value: "-Dswarm.project.stage=production -Dswarm.project.stage.file=file:///app/config/review-config.yml"
          volumeMounts:
            - name: config
              mountPath: /app/config
          image: review
          imagePullPolicy: Always
          name: review
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: "/health"
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreashold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: "/health"
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreashold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              memory: 200Mi
        volumes:
          - configMap:
              name: review-config
              items:
              - key: "review-config.yml"
                path: "review-config.yml"
            name: config
        terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 75
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - review
        from:
          kind: ImageStreamTag
          name: review:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"review-postgresql","namespace":"","kind":"Service"}]'
    labels:
      app: review
    name: review
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: review
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: review-postgresql
    labels:
      comp-type: database
      app: review
  spec:
    replicas: 0
    selector:
      deploymentconfig: review-postgresql
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: review
          comp-type: database
          deploymentconfig: review-postgresql
        name: review-postgresql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            value: ${REVIEW_DB_USERNAME}
          - name: POSTGRESQL_PASSWORD
            value: ${REVIEW_DB_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: review
          image: postgresql
          imagePullPolicy: Always
          name: review-postgresql
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: review-postgresql-data
          ports:
          - containerPort: 5432
            protocol: TCP
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
        terminationGracePeriodSeconds: 60
        volumes:
        - name: review-postgresql-data
          emptyDir: {}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - review-postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:latest
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: review
    name: review-postgresql
  spec:
    ports:
    - port: 5432
      targetPort: 5432
    selector:
      deploymentconfig: review-postgresql
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: review-config
    labels:
      app: review
  data:
    review-config.yml: |-
      project:
        stage: production
      swarm:
        datasources:
          data-sources:
            ReviewDS:
              driver-name: postgresql
              connection-url: jdbc:postgresql://review-postgresql:5432/review
              user-name: ${REVIEW_DB_USERNAME}
              password: ${REVIEW_DB_PASSWORD}

parameters:
- description: Git source URI for application
  displayName: Git source repository
  name: GIT_URI
  required: true
  value: https://github.com/jbossdemocentral/coolstore-microservice
- displayName: Git branch/tag reference
  name: GIT_REF
  required: true
  value: stable-ocp-3.7
- description: Maven mirror url. If nexus is deployed locally, use nexus url (e.g. http://nexus.ci:8081/content/groups/public/)
  displayName: Maven mirror url
  name: MAVEN_MIRROR_URL
- description: NPM mirror url. If nexus is deployed locally, use nexus url (e.g. http://nexus.ci:8081/repository/npm/)
  displayName: NPM mirror url
  name: NPM_MIRROR
- description: Bower mirror url. If nexus is deployed locally, use nexus url (e.g. http://nexus.ci:8081/repository/bower-mirror/)
  displayName: Bower mirror url
  name: BOWER_MIRROR
- description: Inventory Service database user name
  displayName: Inventory Database username
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: INVENTORY_DB_USERNAME
  required: true
- description: Inventory Service database user password
  displayName: Inventory Database password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: INVENTORY_DB_PASSWORD
  required: true
- description: Catalog Service database user name
  displayName: Catalog Database username
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: CATALOG_DB_USERNAME
  required: true
- description: Catalog Service database user password
  displayName: Catalog Database password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: CATALOG_DB_PASSWORD
  required: true
- description: Rating Service database user name
  displayName: Rating Database username
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: RATING_DB_USERNAME
  required: true
- description: Rating Service database user password
  displayName: Rating Database password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: RATING_DB_PASSWORD
  required: true
- description: Review Service database user name
  displayName: Review Database username
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: REVIEW_DB_USERNAME
  required: true
- description: Review Service database user password
  displayName: Review Database password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: REVIEW_DB_PASSWORD
  required: true
- description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
  displayName: ImageStream Namespace
  value: openshift
  name: IMAGE_STREAM_NAMESPACE
  required: true
