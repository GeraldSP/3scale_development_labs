apiVersion: v1
kind: Template
labels:
  application: coolstore-services
metadata:
  name: coolstore-services



parameters:
- description: Coolstore Artifacts URL and Subpath
  name: ARTIFACTS_URL_AND_SUBPATH
  required: true
  value: http://people.redhat.com/jbride/artifacts
- description: Application name
  name: INVENTORY_SERVICE_NAME
  required: true
  value: inventory
- description: Inventory Service database user name
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: INVENTORY_DB_USERNAME
  required: true
- description: Inventory Service database user password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: INVENTORY_DB_PASSWORD
  required: true
- description: Inventory Service database name
  name: INVENTORY_DB_NAME
  required: true
  value: inventorydb
- description: Catalog Service database user name
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: CATALOG_DB_USERNAME
  required: true
- description: Catalog Service database user password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: CATALOG_DB_PASSWORD
  required: true
- description: Catalog Service database name
  name: CATALOG_DATABASE
  required: true
  value: catalogdb




objects:


# ################################          Inventory Service         ###########################
# Inventory database related artifacts
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      application: ${INVENTORY_SERVICE_NAME}-psql
    name: ${INVENTORY_SERVICE_NAME}-psql
  spec:
    ports:
    - port: 5432
      targetPort: 5432
    selector:
      deploymentconfig: ${INVENTORY_SERVICE_NAME}-psql
    sessionAffinity: None
    type: ClusterIP

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${INVENTORY_SERVICE_NAME}-psql
    labels:
      application: ${INVENTORY_SERVICE_NAME}-psql
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${INVENTORY_SERVICE_NAME}-psql
    strategy:
      recreateParams:
        post:
          execNewPod:
            command:
              - /bin/sh
              - -i
              - -c
              - sleep 10 && PGPASSWORD=$POSTGRESQL_PASSWORD psql -h $INVENTORY_PSQL_SERVICE_HOST -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c "$POSTGRESQL_INIT"
            containerName: ${INVENTORY_SERVICE_NAME}-psql
            env:
            - name: POSTGRESQL_INIT
              value: CREATE TABLE product_inventory (itemid character varying(255) 
                NOT NULL,link character varying(255),location character varying(255),
               quantity integer NOT NULL);
                ALTER TABLE product_inventory OWNER TO jboss;ALTER TABLE ONLY product_inventory 
                ADD CONSTRAINT product_inventory_pkey PRIMARY KEY (itemid);
                INSERT into product_inventory (itemid, link, location, quantity) 
                values ('329299', 'http://maps.google.com/?q=Raleigh', 'Raleigh', 736);
                INSERT into product_inventory (itemid, link, location, quantity) 
                values ('329199', 'http://maps.google.com/?q=Raleigh', 'Raleigh', 512);
                INSERT into product_inventory (itemid, link, location, quantity) 
                values ('165613', 'http://maps.google.com/?q=Raleigh', 'Raleigh', 256);
                INSERT into product_inventory (itemid, link, location, quantity) 
                values ('165614', 'http://maps.google.com/?q=Raleigh', 'Raleigh', 29);
                INSERT into product_inventory (itemid, link, location, quantity) 
                values ('165954', 'http://maps.google.com/?q=Raleigh', 'Raleigh', 87);
                INSERT into product_inventory (itemid, link, location, quantity) 
                values ('444434', 'http://maps.google.com/?q=Raleigh', 'Raleigh', 443);
                INSERT into product_inventory (itemid, link, location, quantity) 
                values ('444435', 'http://maps.google.com/?q=Raleigh', 'Raleigh', 600);
                INSERT into product_inventory (itemid, link, location, quantity) 
                values ('444436', 'http://maps.google.com/?q=Tokyo', 'Tokyo', 230);
          failurePolicy: ignore
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          application: ${INVENTORY_SERVICE_NAME}-psql
          deploymentconfig: ${INVENTORY_SERVICE_NAME}-psql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            value: ${INVENTORY_DB_USERNAME}
          - name: POSTGRESQL_PASSWORD
            value: ${INVENTORY_DB_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: ${INVENTORY_DB_NAME}
          image: postgresql
          imagePullPolicy: IfNotPresent
          name: ${INVENTORY_SERVICE_NAME}-psql
          ports:
          - containerPort: 5432
            protocol: TCP
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: inventory-postgresql-data
          livenessProbe:
            initialDelaySeconds: 30
            failureThreshold: 10
            periodSeconds: 10
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
            failureThreshold: 10
            periodSeconds: 10
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 50m
              memory: 256Mi
        terminationGracePeriodSeconds: 60
        volumes:
        - name: inventory-postgresql-data
          persistentVolumeClaim:
            claimName: inventory-psql-pv
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${INVENTORY_SERVICE_NAME}-psql
        from:
          kind: ImageStreamTag
          name: postgresql:latest
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      application: ${INVENTORY_SERVICE_NAME}-psql
    name: inventory-psql-pv
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi

# At the moment, there is no direct support in WildFly Swarm for ConfigMaps. 
# To use a ConfigMap-based configuration, build a ConfigMap from the configuration YAML file, mount the ConfigMap to a well-known directory in the container, and have the WildFly Swarm startup command refer to the mounted properties file.
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      application: ${INVENTORY_SERVICE_NAME}-psql
    name: inventory-config
  data:
    project-defaults.yml: |
      swarm:
        datasources:
          data-sources:
            InventoryDS:
              driver-name: postgresql
              connection-url: jdbc:postgresql://inventory-psql:5432/inventorydb
              user-name: jboss
              password: jboss


# Inventory Service BC
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      appplication: ${INVENTORY_SERVICE_NAME}
    name: inventory-service-s2i
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: inventory-service:latest
    postCommit: {}
    resources:
      limits:
        cpu: "1"
        memory: 1Gi
      requests:
        cpu: "1"
        memory: 1Gi
    runPolicy: Serial
    source:
      dockerfile: |-
        FROM redhat-openjdk18-openshift:1.1
        RUN curl ${ARTIFACTS_URL_AND_SUBPATH}/inventory-service-1.0.0-SNAPSHOT-swarm.jar -o /deployments/inventory-service-swarm.jar
      type: Dockerfile
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: redhat-openjdk18-openshift:1.1
          namespace: openshift
      type: Docker
    triggers:
    - type: ImageChange
    - type: ConfigChange

# imagestream for inventory service created from BC resource defined in this template
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      application: ${INVENTORY_SERVICE_NAME}
    name: inventory-service
  spec:
    lookupPolicy:
      local: false


# Inventory Service DC
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      application: ${INVENTORY_SERVICE_NAME}
    name: ${INVENTORY_SERVICE_NAME}
  spec:
    # JA Bride:  setting all DCs to paused.  Will then start each one via ansible
    paused: true
    replicas: 1
    selector:
      deploymentConfig: ${INVENTORY_SERVICE_NAME}
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          application: ${INVENTORY_SERVICE_NAME}
          deploymentConfig: ${INVENTORY_SERVICE_NAME}
        name: ${INVENTORY_SERVICE_NAME}
      spec:
        containers:
        - env:
          - name: JAVA_OPTIONS
            value: -Dswarm.project.stage.file=file:///app/config/project-defaults.yml
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: inventory-service:latest
          imagePullPolicy: IfNotPresent
          name: ${INVENTORY_SERVICE_NAME}
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: wildfly-swarm
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 9779
            name: prometheus
            protocol: TCP
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config
            name: config
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            name: inventory-config
          name: config
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - wildfly-swarm
        from:
          kind: ImageStreamTag
          name: inventory-service:latest
      type: ImageChange

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      application: ${INVENTORY_SERVICE_NAME}
    name: ${INVENTORY_SERVICE_NAME}
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      deploymentconfig: ${INVENTORY_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP

- apiVersion: v1
  kind: Route
  metadata:
    labels:
      application: ${INVENTORY_SERVICE_NAME}
    name: ${INVENTORY_SERVICE_NAME}
  spec:
    host:
    port:
      targetPort: 8080
    to:
      kind: Service
      name: ${INVENTORY_SERVICE_NAME}
###############################################################################################





# ################################          Catalog Service         ###########################

# Catalog Service
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      application: catalog-mongodb
    name: catalog-mongodb
  spec:
    ports:
    - name: mongo
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      deploymentconfig: catalog-mongodb
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      application: catalog-mongodb
    name: catalog-mongodb
  spec:
    replicas: 1
    selector:
      deploymentconfig: catalog-mongodb
    strategy:
      recreateParams:
        post:
          execNewPod:
            command:
              - /bin/sh
              - -i
              - -c
              - sleep 10 && /opt/rh/rh-mongodb32/root/usr/bin/mongo $CATALOG_MONGODB_SERVICE_HOST:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="$MONGODB_INIT"
            containerName: catalog-mongodb
            env:
            - name: MONGODB_INIT
              value: db.products.insert({"_id":"329299","itemId":"329299","name":"Red Fedora",
                "desc":"Official Red Hat Fedora","price":34.99});
                db.products.insert({"_id":"329199","itemId":"329199","name":"Forge Laptop Sticker",
                "desc":"JBoss Community Forge Project Sticker","price":8.50});
                db.products.insert({"_id":"165613","itemId":"165613","name":"Solid Performance Polo",
                "desc":"Moisture-wicking, antimicrobial 100% polyester design wicks for life of garment. 
                No-curl, rib-knit collar; special collar band maintains crisp fold; three-button placket 
                with dyed-to-match buttons; hemmed sleeves; even bottom with side vents; Import. 
                Embroidery. Red Pepper.","price":17.80});
                db.products.insert({"_id":"165614","itemId":"165614","name":"Ogio Caliber Polo",
                "desc":"Moisture-wicking 100% polyester. Rib-knit collar and cuffs; Ogio jacquard tape inside 
                neck; bar-tacked three-button placket with Ogio dyed-to-match buttons; side vents; tagless; 
                Ogio badge on left sleeve. Import. Embroidery. Black.","price":28.75});
                db.products.insert({"_id":"165954","itemId":"165954","name":"16 oz. Vortex Tumbler",
                "desc":"Double-wall insulated, BPA-free, acrylic cup. Push-on lid with thumb-slide closure; 
                for hot and cold beverages. Holds 16 oz. Hand wash only. Imprint. Clear.","price":6.00});
                db.products.insert({"_id":"444434","itemId":"444434","name":"Pebble Smart Watch",
                "desc":"Smart glasses and smart watches are perhaps two of the most exciting developments in recent 
                years. ","price":24.00});
                db.products.insert({"_id":"444435","itemId":"444435","name":"Oculus Rift",
                "desc":"The world of gaming has also undergone some very unique and compelling tech advances in recent years. 
                Virtual reality, the concept of complete immersion into a digital universe through a special headset, has 
                been the white whale of gaming and digital technology ever since Nintendo marketed its Virtual Boy gaming 
                system in 1995.","price":106.00});
                db.products.insert({"_id":"444436","itemId":"444436","name":"Lytro Camera",
                "desc":"Consumers who want to up their photography game are looking at newfangled cameras like the Lytro Field 
                camera, designed to take photos with infinite focus, so you can decide later exactly where you want the focus of 
                each image to be.","price":44.30});
          failurePolicy: ignore
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          application: catalog-mongodb
          deploymentconfig: catalog-mongodb
      spec:
        containers:
        - env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MONGODB_USER
            value: ${CATALOG_DB_USERNAME}
          - name: MONGODB_PASSWORD
            value: ${CATALOG_DB_PASSWORD}
          - name: MONGODB_DATABASE
            value: ${CATALOG_DATABASE}
          - name: MONGODB_ADMIN_PASSWORD
            value: ${CATALOG_DB_PASSWORD}
          image: mongodb
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: catalog-mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            failureThreshold: 10
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 256Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: mongodb-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: mongodb-data
          persistentVolumeClaim:
            claimName: mongodb-data-pv
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - catalog-mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:3.2
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      application: catalog-mongodb
    name: mongodb-data-pv
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi


- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      application: ${CATALOG_SERVICE_NAME}
    name: app-config
  data:
    app-config.yaml: |-
      catalog.http.port: 8080
      connection_string: mongodb://catalog-mongodb:27017
      db_name: catalogdb
      username: mongo
      password: mongo
###############################################################################################
