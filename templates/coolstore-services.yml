apiVersion: v1
kind: Template
labels:
  application: coolstore-services
metadata:
  name: coolstore-services
objects:

# Inventory database related artifacts
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      application: ${INVENTORY_SERVICE_NAME}-psql
    name: ${INVENTORY_SERVICE_NAME}-psql
  spec:
    ports:
    - port: 5432
      targetPort: 5432
    selector:
      deploymentconfig: ${INVENTORY_SERVICE_NAME}-psql
    sessionAffinity: None
    type: ClusterIP

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${INVENTORY_SERVICE_NAME}-psql
    labels:
      application: ${INVENTORY_SERVICE_NAME}-psql
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${INVENTORY_SERVICE_NAME}-psql
    strategy:
      recreateParams:
        post:
          execNewPod:
            command:
              - /bin/sh
              - -i
              - -c
              - sleep 10 && PGPASSWORD=$POSTGRESQL_PASSWORD psql -h $INVENTORY_PSQL_SERVICE_HOST -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c "$POSTGRESQL_INIT"
            containerName: ${INVENTORY_SERVICE_NAME}-psql
            env:
            - name: POSTGRESQL_INIT
              value: CREATE TABLE product_inventory (itemid character varying(255) 
                NOT NULL,link character varying(255),location character varying(255),
               quantity integer NOT NULL);
                ALTER TABLE product_inventory OWNER TO jboss;ALTER TABLE ONLY product_inventory 
                ADD CONSTRAINT product_inventory_pkey PRIMARY KEY (itemid);
                INSERT into product_inventory (itemid, link, location, quantity) 
                values ('329299', 'http://maps.google.com/?q=Raleigh', 'Raleigh', 736);
                INSERT into product_inventory (itemid, link, location, quantity) 
                values ('329199', 'http://maps.google.com/?q=Raleigh', 'Raleigh', 512);
                INSERT into product_inventory (itemid, link, location, quantity) 
                values ('165613', 'http://maps.google.com/?q=Raleigh', 'Raleigh', 256);
                INSERT into product_inventory (itemid, link, location, quantity) 
                values ('165614', 'http://maps.google.com/?q=Raleigh', 'Raleigh', 29);
                INSERT into product_inventory (itemid, link, location, quantity) 
                values ('165954', 'http://maps.google.com/?q=Raleigh', 'Raleigh', 87);
                INSERT into product_inventory (itemid, link, location, quantity) 
                values ('444434', 'http://maps.google.com/?q=Raleigh', 'Raleigh', 443);
                INSERT into product_inventory (itemid, link, location, quantity) 
                values ('444435', 'http://maps.google.com/?q=Raleigh', 'Raleigh', 600);
                INSERT into product_inventory (itemid, link, location, quantity) 
                values ('444436', 'http://maps.google.com/?q=Tokyo', 'Tokyo', 230);
          failurePolicy: ignore
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          application: ${INVENTORY_SERVICE_NAME}-psql
          deploymentconfig: ${INVENTORY_SERVICE_NAME}-psql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            value: ${INVENTORY_DB_USERNAME}
          - name: POSTGRESQL_PASSWORD
            value: ${INVENTORY_DB_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: ${INVENTORY_DB_NAME}
          image: postgresql
          imagePullPolicy: IfNotPresent
          name: ${INVENTORY_SERVICE_NAME}-psql
          ports:
          - containerPort: 5432
            protocol: TCP
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: inventory-postgresql-data
          livenessProbe:
            initialDelaySeconds: 30
            failureThreshold: 10
            periodSeconds: 10
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
            failureThreshold: 10
            periodSeconds: 10
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 50m
              memory: 256Mi
        terminationGracePeriodSeconds: 60
        volumes:
        - name: inventory-postgresql-data
          persistentVolumeClaim:
            claimName: inventory-psql-pv
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${INVENTORY_SERVICE_NAME}-psql
        from:
          kind: ImageStreamTag
          name: postgresql:latest
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      application: ${INVENTORY_SERVICE_NAME}-psql
    name: inventory-psql-pv
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi

# At the moment, there is no direct support in WildFly Swarm for ConfigMaps. 
# To use a ConfigMap-based configuration, build a ConfigMap from the configuration YAML file, mount the ConfigMap to a well-known directory in the container, and have the WildFly Swarm startup command refer to the mounted properties file.
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      application: ${INVENTORY_SERVICE_NAME}-psql
    name: inventory-config
  data:
    project-defaults.yml: |
      swarm:
        datasources:
          data-sources:
            InventoryDS:
              driver-name: postgresql
              connection-url: jdbc:postgresql://inventory-psql:5432/inventorydb
              user-name: jboss
              password: jboss


# Inventory Service BC
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      appplication: ${INVENTORY_SERVICE_NAME}
    name: inventory-service-s2i
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: inventory-service:latest
    postCommit: {}
    resources:
      limits:
        cpu: "1"
        memory: 1Gi
      requests:
        cpu: "1"
        memory: 1Gi
    runPolicy: Serial
    source:
      dockerfile: |-
        FROM redhat-openjdk18-openshift:1.1
        RUN curl http://people.redhat.com/jbride/inventory-service-1.0.0-SNAPSHOT-swarm.jar -o /deployments/inventory-service-swarm.jar
      type: Dockerfile
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: redhat-openjdk18-openshift:1.1
          namespace: openshift
      type: Docker
    triggers:
    - type: ImageChange
    - type: ConfigChange

# imagestream for inventory service created from BC resource defined in this template
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      application: ${INVENTORY_SERVICE_NAME}
    name: inventory-service
  spec:
    lookupPolicy:
      local: false


# Inventory Service DC
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      application: ${INVENTORY_SERVICE_NAME}
    name: ${INVENTORY_SERVICE_NAME}
  spec:
    # JA Bride:  setting all DCs to paused.  Will then start each one via ansible
    paused: true
    replicas: 1
    selector:
      deploymentConfig: ${INVENTORY_SERVICE_NAME}
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          application: ${INVENTORY_SERVICE_NAME}
          deploymentConfig: ${INVENTORY_SERVICE_NAME}
        name: ${INVENTORY_SERVICE_NAME}
      spec:
        containers:
        - env:
          - name: JAVA_OPTIONS
            value: -Dswarm.project.stage.file=file:///app/config/project-defaults.yml
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: inventory-service:latest
          imagePullPolicy: IfNotPresent
          name: ${INVENTORY_SERVICE_NAME}
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: wildfly-swarm
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 9779
            name: prometheus
            protocol: TCP
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config
            name: config
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            name: inventory-config
          name: config
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - wildfly-swarm
        from:
          kind: ImageStreamTag
          name: inventory-service:latest
      type: ImageChange

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      application: ${INVENTORY_SERVICE_NAME}
    name: ${INVENTORY_SERVICE_NAME}
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      deploymentconfig: ${INVENTORY_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP

- apiVersion: v1
  kind: Route
  metadata:
    labels:
      application: ${INVENTORY_SERVICE_NAME}
    name: ${INVENTORY_SERVICE_NAME}
  spec:
    host:
    port:
      targetPort: 8080
    to:
      kind: Service
      name: ${INVENTORY_SERVICE_NAME}


parameters:
- description: Application name
  name: INVENTORY_SERVICE_NAME
  required: true
  value: inventory
- description: Inventory Service database user name
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: INVENTORY_DB_USERNAME
  required: true
- description: Inventory Service database user password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: INVENTORY_DB_PASSWORD
  required: true
- description: Inventory Service database name
  name: INVENTORY_DB_NAME
  required: true
  value: inventorydb
